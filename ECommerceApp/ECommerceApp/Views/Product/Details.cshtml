@model ECommerceApp.Models.Product

@{
    ViewData["Title"] = $"{Model.Name} - Product Details";
    int availableQuantity = Model.Stock - ViewBag.CartQuantity;
    bool isAvailable = availableQuantity > 0;
    bool isAuthenticated = User.Identity.IsAuthenticated;
    string? loggedInUserId = isAuthenticated ? User.FindFirstValue(ClaimTypes.NameIdentifier) : "";
}
<style>
    .star-rating{
        cursor: pointer;
    }
</style>
<div class="container mt-5">
    <div class="row">
        <div class="col-md-5">
            <div class="card border-0 shadow-sm">
                <img src="@Model.ImageUrl" class="card-img-top img-fluid" alt="@Model.Name">
            </div>
        </div>

        <div class="col-md-7">
            <h2 class="mb-3">@Model.Name</h2>

            <div class="d-flex justify-content-between align-items-center mb-4">
                <h3 class="text-primary">@Model.Price.ToString("C")</h3>
                <span class="badge bg-@(Model.Stock > 0 ? "success" : "danger") p-2">
                    @(Model.Stock > 0 ? $"In Stock ({Model.Stock})" : "Out of Stock")
                </span>
            </div>

            <p class="mb-3">
                <span class="text-muted">Category:</span>
                @(Model.Category?.Name ?? "Uncategorized")
            </p>

            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Description</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">@Model.Description</p>
                </div>
            </div>

            <form asp-controller="Cart" asp-action="Add" method="post" class="mb-4">
                <input type="hidden" name="productId" value="@Model.Id" />
                <div class="row g-3 align-items-center">
                    <div class="col-auto">
                        <label for="quantity" class="col-form-label">Quantity:</label>
                    </div>
                    <div class="col-auto">
                        <input type="number" id="quantity" name="quantity" class="form-control" value="1" min="1" max="@availableQuantity" @(!isAvailable ? "disabled" : "") />
                        @if (ViewBag.CartQuantity > 0)
                        {
                            <small class="text-muted d-block">(@ViewBag.CartQuantity already in your cart)</small>
                        }
                    </div>
                    <div class="col-auto">
                        <button type="submit" class="btn btn-primary add-to-cart" @(!isAvailable ? "disabled" : "")>
                            <i class="bi bi-cart-plus"></i> Add to Cart
                        </button>
                    </div>
                </div>
            </form>

            <a asp-controller="Product" asp-action="Index" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Back to Products
            </a>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-light">
                    <ul class="nav nav-tabs card-header-tabs" id="reviewsTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="all-reviews-tab" data-bs-toggle="tab" data-bs-target="#all-reviews" type="button" role="tab" aria-controls="all-reviews" aria-selected="true">All Reviews</button>
                        </li>
                        @if(isAuthenticated)
                        {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="your-reviews-tab" data-bs-toggle="tab" data-bs-target="#your-reviews" type="button" role="tab" aria-controls="your-reviews" aria-selected="false">Your Reviews</button>
                        </li>
                        }
                    </ul>
                </div>
                <div class="card-body">
                    <div class="mb-4">
                        @{
                            var avgRating = Model.Reviews != null && Model.Reviews.Any() ? Model.Reviews.Average(r => r.Rating) : 0;
                            var totalReviews = Model.Reviews != null ? Model.Reviews.Count : 0;
                        }
                        <div class="d-flex align-items-center justify-content-between mb-2">
                            <div class="d-flex align-items-center">
                                <div class="me-2">
                                    <span class="fs-4 fw-bold">@avgRating.ToString("F1")</span>
                                    <span class="text-muted">/ 5</span>
                                </div>
                                <div class="ratings">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <i class="bi @(i <= Math.Round(avgRating) ? "bi-star-fill text-warning" : "bi-star")"></i>
                                    }
                                </div>
                                <span class="ms-2 text-muted">(<span id="total-reviews">@totalReviews</span> reviews)</span>
                            </div>
                            <div class="ms-auto">
                                <button id="openReviewBtn" class="btn btn-sm btn-outline-primary" @(!isAuthenticated ? "disabled" : "")>Write a Review</button>
                                @if (!isAuthenticated)
                                {
                                    <span class="text-danger d-block mt-1">Please <a href="/Account/Login">sign in</a> to review.</span>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="tab-content" id="reviewsTabContent">
                        <div class="tab-pane fade show active" id="all-reviews" role="tabpanel" aria-labelledby="all-reviews-tab">
                            <div id="reviews-container">
                                <div class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="mt-2">Loading reviews...</p>
                                </div>
                            </div>
                            <div id="pagination-container" class="mt-4">
                                <nav>
                                    <ul class="pagination justify-content-center"></ul>
                                </nav>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="your-reviews" role="tabpanel" aria-labelledby="your-reviews-tab">
                            <div id="user-reviews-container">
                                @if (!isAuthenticated)
                                {
                                    <div class="alert alert-info">Please <a href="/Account/Login">sign in</a> to see your reviews.</div>
                                }
                                else
                                {
                                    <div class="text-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <p class="mt-2">Loading your reviews...</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="reviewModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Write a Review</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="reviewForm">
                    <input type="hidden" id="productId" value="@Model.Id" />

                    <div class="mb-3">
                        <label for="rating" class="form-label">Rating</label>
                        <div class="rating-stars">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <i class="bi bi-star star-rating" data-rating="@i"></i>
                            }
                        </div>
                        <input type="hidden" id="rating" name="rating" value="0" required />
                    </div>

                    <div class="mb-3">
                        <label for="comment" class="form-label">Your Review</label>
                        <textarea class="form-control" id="comment" name="comment" rows="4" placeholder="Share your thoughts about this product"></textarea>
                    </div>

                    <div id="reviewError" class="alert alert-danger d-none"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="submitReview" class="btn btn-primary">Submit Review</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    $(document).ready(function () {
        const productId = @Model.Id;
        let currentPage = 1;
        let reviewModal = null;
        let hasLoadedUserReviews = false;
        $('.add-to-cart').on('click', () => {
                   refreshCartCount();
                });
        loadReviews(currentPage);

        reviewModal = new bootstrap.Modal(document.getElementById('reviewModal'));
        /////////////////////////////////////////////////////
        $('#reviewsTabs button').on('click', function (e) {
        e.preventDefault();
        $(this).tab('show');
        });
        /////////////////////////////////////////////////////
        $('#your-reviews-tab').on('shown.bs.tab', function () {
        if (!hasLoadedUserReviews && '@isAuthenticated' === 'True') {
            loadUserReviews();
        }
        });
        ///////////////////////////////////////////
        $('#openReviewBtn').click(function() {
            reviewModal.show();
        });
        ///////////////////////////////////////////
        $('.star-rating').click(function() {
            const rating = $(this).data('rating');
            $('#rating').val(rating);

            $('.star-rating').each(function(index) {
                if (index < rating) {
                    $(this).removeClass('bi-star').addClass('bi-star-fill text-warning');
                } else {
                    $(this).removeClass('bi-star-fill text-warning').addClass('bi-star');
                }
            });
        });
        //////////////////////////////////////////////////////////////
        $('#submitReview').click(function() {
        const rating = $('#rating').val();
        const comment = $('#comment').val();
        const mode = $('#reviewForm').attr('data-mode') || 'add';

        if (rating == 0) {
            $('#reviewError').text('Please select a rating').removeClass('d-none');
            return;
        }

        $('#reviewError').addClass('d-none');

        if (mode === 'edit') {
            const reviewId = $('#reviewForm').attr('data-review-id');
            updateReview(reviewId, rating, comment);
        } else {
            addReview(productId, rating, comment);
        }
    });
    /////////////////////////////////////////////////////////
    $(document).on('click', '.edit-review', function() {
        const reviewId = $(this).data('review-id');
        const ratingValue = $(this).closest('.border-bottom').find('.bi-star-fill.text-warning').length;
        const commentText = $(this).closest('.border-bottom').find('p').text();

        $('#reviewForm').attr('data-mode', 'edit');
        $('#reviewForm').attr('data-review-id', reviewId);
        $('#rating').val(ratingValue);
        $('#comment').val(commentText);

        $('.star-rating').each(function(index) {
            if (index < ratingValue) {
                $(this).removeClass('bi-star').addClass('bi-star-fill text-warning');
            } else {
                $(this).removeClass('bi-star-fill text-warning').addClass('bi-star');
            }
        });
        $('.modal-title').text('Edit Your Review');
        $('#submitReview').text('Update Review');
        reviewModal.show();
    });
    //////////////////////////////////////////////////////////////////
        $(document).on('click', '.pagination .page-link', function(e) {
            e.preventDefault();
            const page = $(this).data('page');
            if (page) {
                console.log("Pagination clicked, loading page:", page);
                currentPage = page;
                loadReviews(currentPage);
            }
        });
        ///////////////////////////////////////////////////////////////////
        function loadReviews(page) {
            $.ajax({
                url: '@Url.Action("GetReviews", "Review")',
                type: 'GET',
                data: {
                    id: productId,
                    page: page
                },
                success: function(response) {
                    console.log("Reviews loaded successfully:", response);
                    if (response && response.products) {
                        displayReviews(response.products);
                        updatePagination(response.pagination.currentPage, response.pagination.totalPages);
                        $('#total-reviews').text(response.pagination.totalProducts);
                    } else {
                        console.error("Invalid response format:", response);
                        $('#reviews-container').html('<div class="alert alert-warning">No reviews available or invalid response format.</div>');
                    }
                },
                error: function() {
                    $('#reviews-container').html('<div class="alert alert-danger">Error loading reviews. Please try again later.</div>');
                }
            });
        }
        ////////////////////////////////////////////////////////
        function loadUserReviews() {
        $('#user-reviews-container').html(`
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading your reviews...</p>
            </div>
        `);

        $.ajax({
            url: '@Url.Action("GetUserReviewsForProduct", "Review")',
            type: 'GET',
            data: {
                productId: productId
            },
            success: function(reviews) {
                hasLoadedUserReviews = true;
                displayUserReviews(reviews);
            },
            error: function(xhr, status, error) {
                console.error("Error loading user reviews:", {status, error, xhr});
                $('#user-reviews-container').html('<div class="alert alert-danger">Error loading your reviews. Please try again later.</div>');
            }
        });
        }
        let loggedInUserId = '@loggedInUserId';
        //////////////////////////////////////////////////////
        function displayReviews(reviews) {
            let reviewsHtml = '';

            if (reviews && reviews.length > 0) {
                reviews.forEach(function(review) {
                    let starsHtml = '';
                    for (let i = 1; i <= 5; i++) {
                        starsHtml += `<i class="bi ${i <= review.rating ? 'bi-star-fill text-warning' : 'bi-star'}"></i>`;
                    }
                    let reviewDate;
                    try {
                        reviewDate = new Date(review.createdAt).toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric'
                        });
                    } catch (e) {
                        console.error("Error formatting date:", e);
                        reviewDate = "Unknown date";
                    }
                    const isCurrentUserReview = review.userId === loggedInUserId;
                    const authorName = isCurrentUserReview ? "You" : (review.userFullName ?? "Anonymous");
                    reviewsHtml += `
                        <div class="border-bottom pb-3 mb-3">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <div class="ratings mb-1">
                                        ${starsHtml}
                                    </div>
                                    <small class="text-muted">Posted on ${reviewDate} by <span class="fw-bold"> ${authorName} </span></small>
                                </div>
                            </div>
                            <p class="mt-2 mb-0">${review.comment}</p>
                        </div>
                    `;
                });
            } else {
                reviewsHtml = '<div class="text-center py-3"><p class="text-muted">No reviews found for this product.</p></div>';
            }

            $('#reviews-container').html(reviewsHtml);
        }
        ///////////////////////////////////////////////////////////
        function displayUserReviews(reviews) {
        let reviewsHtml = '';

        if (reviews && reviews.length > 0) {
            reviews.forEach(function(review) {
                let starsHtml = '';
                for (let i = 1; i <= 5; i++) {
                    starsHtml += `<i class="bi ${i <= review.rating ? 'bi-star-fill text-warning' : 'bi-star'}"></i>`;
                }

                let reviewDate;
                try {
                    reviewDate = new Date(review.createdAt).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric'
                    });
                } catch (e) {
                    console.error("Error formatting date:", e);
                    reviewDate = "Unknown date";
                }

                reviewsHtml += `
                    <div class="border-bottom pb-3 mb-3">
                        <div class="d-flex justify-content-between">
                            <div>
                                <div class="ratings mb-1">
                                    ${starsHtml}
                                </div>
                                <small class="text-muted">Posted on ${reviewDate}</small>
                            </div>
                            <div>
                                <button class="btn btn-sm btn-outline-primary edit-review" data-review-id="${review.id}">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger delete-review" data-review-id="${review.id}">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                        <p class="mt-2 mb-0">${review.comment}</p>
                    </div>
                `;
            });
        } else {
            reviewsHtml = '<div class="text-center py-3"><p class="text-muted">You haven\'t reviewed this product yet.</p></div>';
        }

        $('#user-reviews-container').html(reviewsHtml);

        // Add event handlers for delete buttons if present
        $('.delete-review').click(function() {
            const reviewId = $(this).data('review-id');
            if (confirm('Are you sure you want to delete this review?')) {
                deleteReview(reviewId);
            }
        });
    }
        ///////////////////////////////////////////////////////////
        function deleteReview(reviewId) {
        $.ajax({
            url: '@Url.Action("DeleteReview", "Review")',
            type: 'POST',
            data: {
                reviewId: reviewId
            },
            success: function() {
                loadReviews(currentPage);
                loadUserReviews();
            },
            error: function() {
                alert('Error deleting review. Please try again.');
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////
    function addReview(productId, rating, comment) {
        $.ajax({
            url: '@Url.Action("AddReview", "Review")',
            type: 'POST',
            data: {
                productId: productId,
                rating: rating,
                comment: comment
            },
            success: function(response) {
                resetReviewForm();
                reviewModal.hide();
                loadReviews(currentPage);
                hasLoadedUserReviews = false;
                if ($('#your-reviews-tab').hasClass('active')) {
                    loadUserReviews();
                }
            },
            error: function() {
                $('#reviewError').text('Error submitting review. Please try again.').removeClass('d-none');
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////
    function updateReview(reviewId, rating, comment) {
        $.ajax({
            url: '@Url.Action("UpdateReview", "Review")',
            type: 'POST',
            data: {
                reveiwId: reviewId,
                rating: rating,
                comment: comment
            },
            success: function(response) {
                resetReviewForm();
                reviewModal.hide();

                loadReviews(currentPage);
                hasLoadedUserReviews = false;
                if ($('#your-reviews-tab').hasClass('active')) {
                    loadUserReviews();
                }
            },
            error: function() {
                $('#reviewError').text('Error updating review. Please try again.').removeClass('d-none');
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////
    function resetReviewForm() {
        $('#rating').val(0);
        $('#comment').val('');
        $('.star-rating').removeClass('bi-star-fill text-warning').addClass('bi-star');
        $('#reviewForm').attr('data-mode', 'add');
        $('#reviewForm').removeAttr('data-review-id');
        $('.modal-title').text('Write a Review');
        $('#submitReview').text('Submit Review');
    }
    $('#reviewModal').on('hidden.bs.modal', function () {
        resetReviewForm();
    });
    //////////////////////////////////////////////////////////////////////////
        function updatePagination(currentPage, totalPages) {

            if (totalPages <= 1) {
                $('#pagination-container').hide();
                return;
            }

            $('#pagination-container').show();
            const $pagination = $('.pagination');
            $pagination.empty();

            $pagination.append(`
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <button class="page-link" data-page="${currentPage - 1}" ${currentPage === 1 ? 'disabled' : ''}>Previous</button>
                </li>
            `);

            const maxVisiblePages = 5;
            let startPage = 1;
            let endPage = totalPages;

            if (totalPages > maxVisiblePages)
            {
                const halfVisiblePages = Math.floor(maxVisiblePages / 2);
                if (currentPage <= halfVisiblePages)
                {
                    startPage = 1;
                    endPage = maxVisiblePages;
                }
                else if (currentPage > totalPages - halfVisiblePages)
                {
                    startPage = totalPages - maxVisiblePages + 1;
                    endPage = totalPages;
                }
                else
                {
                    startPage = currentPage - halfVisiblePages;
                    endPage = currentPage + halfVisiblePages;
                }
            }

            for (let i = startPage; i <= endPage; i++)
            {
                $pagination.append(`
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <button class="page-link" data-page="${i}">${i}</button>
                    </li>
                `);
            }

            $pagination.append(`
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <button class="page-link" data-page="${currentPage + 1}" ${currentPage === totalPages ? 'disabled' : ''}>Next</button>
                </li>
            `);
        }
    });
</script>
}